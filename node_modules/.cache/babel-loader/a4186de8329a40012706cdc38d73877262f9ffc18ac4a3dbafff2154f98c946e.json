{"ast":null,"code":"// A centralized service for interacting with the gallery (Cloudinary via Netlify Functions).\n\nexport const getImages = async () => {\n  try {\n    const response = await fetch('/.netlify/functions/get-images');\n    if (!response.ok) {\n      throw new Error(`Failed to fetch images: ${response.status}`);\n    }\n    const data = await response.json();\n    // The body now contains an 'images' array with objects, not just URLs.\n    return data.images || [];\n  } catch (error) {\n    console.error(\"Error loading gallery images:\", error);\n    return []; // Return an empty array on failure\n  }\n};\nexport const uploadImage = async base64File => {\n  try {\n    const response = await fetch('/.netlify/functions/upload-image', {\n      method: 'POST',\n      headers: {\n        'Content-Type': 'application/json'\n      },\n      body: JSON.stringify({\n        file: base64File\n      })\n    });\n    if (!response.ok) {\n      const errorData = await response.json();\n      throw new Error(errorData.message || 'Upload failed.');\n    }\n    const data = await response.json();\n    return {\n      success: true,\n      url: data.secure_url\n    };\n  } catch (error) {\n    return {\n      success: false,\n      error: error.message\n    };\n  }\n};","map":{"version":3,"names":["getImages","response","fetch","ok","Error","status","data","json","images","error","console","uploadImage","base64File","method","headers","body","JSON","stringify","file","errorData","message","success","url","secure_url"],"sources":["/Users/brooklynlanning/Desktop/Event Websites/Bowens-Wedding/src/services/galleryService.js"],"sourcesContent":["// A centralized service for interacting with the gallery (Cloudinary via Netlify Functions).\n\nexport const getImages = async () => {\n    try {\n      const response = await fetch('/.netlify/functions/get-images');\n      if (!response.ok) {\n        throw new Error(`Failed to fetch images: ${response.status}`);\n      }\n      const data = await response.json();\n      // The body now contains an 'images' array with objects, not just URLs.\n      return data.images || []; \n    } catch (error) {\n      console.error(\"Error loading gallery images:\", error);\n      return []; // Return an empty array on failure\n    }\n  };\n  \n  export const uploadImage = async (base64File) => {\n    try {\n      const response = await fetch('/.netlify/functions/upload-image', {\n        method: 'POST',\n        headers: { 'Content-Type': 'application/json' },\n        body: JSON.stringify({ file: base64File }),\n      });\n  \n      if (!response.ok) {\n        const errorData = await response.json();\n        throw new Error(errorData.message || 'Upload failed.');\n      }\n      \n      const data = await response.json();\n      return { success: true, url: data.secure_url };\n    } catch (error) {\n      return { success: false, error: error.message };\n    }\n  };"],"mappings":"AAAA;;AAEA,OAAO,MAAMA,SAAS,GAAG,MAAAA,CAAA,KAAY;EACjC,IAAI;IACF,MAAMC,QAAQ,GAAG,MAAMC,KAAK,CAAC,gCAAgC,CAAC;IAC9D,IAAI,CAACD,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAM,IAAIC,KAAK,CAAC,2BAA2BH,QAAQ,CAACI,MAAM,EAAE,CAAC;IAC/D;IACA,MAAMC,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC;IACA,OAAOD,IAAI,CAACE,MAAM,IAAI,EAAE;EAC1B,CAAC,CAAC,OAAOC,KAAK,EAAE;IACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;IACrD,OAAO,EAAE,CAAC,CAAC;EACb;AACF,CAAC;AAED,OAAO,MAAME,WAAW,GAAG,MAAOC,UAAU,IAAK;EAC/C,IAAI;IACF,MAAMX,QAAQ,GAAG,MAAMC,KAAK,CAAC,kCAAkC,EAAE;MAC/DW,MAAM,EAAE,MAAM;MACdC,OAAO,EAAE;QAAE,cAAc,EAAE;MAAmB,CAAC;MAC/CC,IAAI,EAAEC,IAAI,CAACC,SAAS,CAAC;QAAEC,IAAI,EAAEN;MAAW,CAAC;IAC3C,CAAC,CAAC;IAEF,IAAI,CAACX,QAAQ,CAACE,EAAE,EAAE;MAChB,MAAMgB,SAAS,GAAG,MAAMlB,QAAQ,CAACM,IAAI,CAAC,CAAC;MACvC,MAAM,IAAIH,KAAK,CAACe,SAAS,CAACC,OAAO,IAAI,gBAAgB,CAAC;IACxD;IAEA,MAAMd,IAAI,GAAG,MAAML,QAAQ,CAACM,IAAI,CAAC,CAAC;IAClC,OAAO;MAAEc,OAAO,EAAE,IAAI;MAAEC,GAAG,EAAEhB,IAAI,CAACiB;IAAW,CAAC;EAChD,CAAC,CAAC,OAAOd,KAAK,EAAE;IACd,OAAO;MAAEY,OAAO,EAAE,KAAK;MAAEZ,KAAK,EAAEA,KAAK,CAACW;IAAQ,CAAC;EACjD;AACF,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}